time <- time
empty <- data.frame()
for(i in 1:length(v_years)) {
time_filt <- time %>%
filter(date == v_years[i])
pd <- predict(new_model(), time_filt, type = "response")
pred<-prediction(pd, time_filt$target)
auc <- performance(pred, measure="auc")
gini <- round(2 * auc@y.values[[1]] - 1,2)
empty <- rbind(empty, gini)
}
empty <- empty
colnames(empty) <- c("gini")
empty$date <- v_years
empty <- empty
})
output$gini_time <- renderPlotly({
data <- gini_time_data()
ggplotly(ggplot(data, aes(x = date, y = gini)) +
geom_line() +
ggtitle("Gini of Model through time"))
})
jeffrey_data <- reactive({
pd_train <- predict(new_model(), valid_train, type = "response")
valid_train$pd <- pd_train
pd_test <- predict(new_model(), valid_test, type = "response")
valid_test$pd <- pd_test
pd_full <- predict(new_model(), valid_full, type = "response")
valid_full$pd <- pd_full
jeffrey_train <- GTquantrisk::f_jeffrey_test(valid_train)
jeffrey_test <- GTquantrisk::f_jeffrey_test(valid_test)
jeffrey_full <- GTquantrisk::f_jeffrey_test(valid_full)
jeffrey_data <- rbind(jeffrey_train, jeffrey_test, jeffrey_full)
jeffrey_data <- jeffrey_data
})
output$jeffrey <- DT::renderDataTable({
data <- jeffrey_data()
DT::datatable(data)
})
###############################
}
}
library(readr)
library(dplyr)
library(SIP2019)
library(leaps)
library(ModelMetrics)
library(MASS)
library(smbinning)
library(data.table)
library(ROCR)
library(GTquantrisk)
library(ggcorrplot)
library(knitr)
library(DT)
library(corrplot)
library(shinyWidgets)
library(nleqslv)
library(LDPD)
library(shinydashboard)
library(shiny)
library(shinyjs)
library(plotly)
library(visdat)
install.packages("//fs02/RAS/Quantitative Risk/dev-tools/modules/financial-tool/packages/GTquantrisk_0.1.0.tar.gz", repos=NULL, type="source")
library(GTquantrisk)
### Import financial data TRAIN
train <- read_csv("//fs02/RAS/Quantitative Risk/dev-tools/modules/scorecard-build/analysis/New Data/binning_train.csv")
train <- train %>%
filter(!is.na(target))
train <- as.data.frame(train)
### Import financial data TEST
test <- read_csv("//fs02/RAS/Quantitative Risk/dev-tools/modules/scorecard-build/analysis/New data/binning_test.csv")
test <- test %>%
filter(!is.na(target))
