#                                 Density                                                       #
output$densityhead <- renderText({
paste("Density Plot for", gsub("[_]", " ", input$density_variable))
})
density_df <- reactive({
t_density <- reshaped_df1
t_density <- subset(t_density, variable %in% input$density_variable)
})
output$density <- renderPlotly({
p <- ggplot(density_df(), aes(x = value)) +
geom_density(fill = "purple") +
geom_vline(aes(xintercept = mean(density_df()$value, na.rm = TRUE)),
color = "black", linetype = "dashed", size = 1) +
labs(title = "Density Curve", x = paste(gsub("[_]", " ", input$density_variable)), y = "Density")
})
#------------------------------Company Breakdown-------------------------------------#
observeEvent(input$company_sector,{
updateSelectInput(session,'company_symbol',
choices=sort(unique(df1_join$symbol[df1_join$sector==input$company_sector])))
})
output$companyhead <- renderText({
paste(gsub("[_]", " ", input$type), "Analysis for", gsub("[_]", " ", input$company_symbol))
})
company_df <- reactive({
t_company <- reshaped_df1_join
t_company <- subset(t_company, sector %in% input$company_sector)
t_company <- subset(t_company, symbol %in% input$company_symbol)
t_company <- subset(t_company, Type %in% input$company_type)
t_company <- t_company %>%
group_by(date)
})
output$company_plot <- renderPlotly({
ggplot(company_df(), aes(x = date, y = value)) +
geom_bar(stat = "identity") +
facet_wrap(~variable)
})
}
#-----------------------------------------------------------------------------------------------#
#                                 Shiny App Run                                                 #
shinyApp(ui,server)
runApp('//fs02/RAS/Quantitative Risk/dev-tools/modules/financial-tool/r-scripts/Joined scripts')
#Prep
source("UDF.R")
#---------------------------------------------------------------------------------------------#
#                           Shiny Server                                                      #
server <- function(input,output,session){
# Analysis Sidepanel
observeEvent(input$type,{
updateSelectInput(session,'variable',
choices=sort(unique(t_definitions$Name[t_definitions$Type==input$type])))
})
# Statistics sidepanel
observeEvent(input$statistics_sector,{
updateSelectInput(session,'statistics_company',
choices=sort(unique(df1_join$symbol[df1_join$sector==input$statistics_sector])))
})
observeEvent(input$statistics_type,{
updateSelectInput(session,'statistics_variable',
choices=sort(unique(t_definitions$Name[t_definitions$Type==input$statistics_type])))
})
#Outlier Sidepanel
observeEvent(input$type_outlier,{
updateSelectInput(session,'variable_outlier',
choices=sort(unique(t_definitions$Name[t_definitions$Type==input$type_outlier])))
})
#Density Sidepanel
observeEvent(input$density_type,{
updateSelectInput(session,'density_variable',
choices=sort(unique(t_definitions$Name[t_definitions$Type==input$density_type])))
})
observeEvent(input$density_sector,{
updateSelectInput(session,'density_company',
choices=sort(unique(df1_join$symbol[df1_join$sector==input$density_sector])))
})
#-----------------------------------------------------------------------------------------------#
#                                     Mains                                                     #
output$header <- reactive({
paste(gsub('[_]',' ',input$variable),"analysis")
})
output$Definition <- renderText({
paste("Definition")
})
#This reactive table will change depending on what ratio is entered by the user. The outputs
#below will then extract the relevant information and put it into the Analysis tab.
define_table <- reactive({
t_definitons_filtered <- t_definitions
t_definitons_filtered <- subset(t_definitons_filtered, Name %in% input$variable)
})
output$definition <- renderText({
paste(define_table()[4])
})
output$ExpectedRiskDirection <- renderText({
paste("Expected Risk Direction")
})
output$riskdirection <- renderText({
paste(define_table()[5])
})
output$Formula <- renderText({
paste("Formula")
})
output$formula <- renderText({
paste(define_table()[3])
})
output$componenttable <- renderDataTable({
#Creates a blank dataframe, 2 columns - 1 for components, 1 for sub-derivations
components <- data.frame(nrow = 7,ncol = 2)
#Loops through define_table and adds in relevant details
for(i in 1:7){
if(!is.na(define_table()[5+i])){
components[i,1] <- define_table()[5+i]
}else{
components[i,1] <- NA
}
}
for(i in 1:2){
if(!is.na(define_table()[12+i])){
components[i,2] <- define_table()[12+i]
}else{
components[i,2] <- NA
}
}
#Table size will adjust according to the number of elements
components <- components[complete.cases(components[,1]),]
datatable(components,
colnames = c("Core Component","Sub-Derivation"), options = list(dom = 'ft',columnDefs = list(list(className = 'dt-center'))),
rownames = FALSE,class = 'cell-border stripe')
})
output$FormulaFullFormat <- renderText({
paste("Formula (full format)")
})
output$fullformula <- renderText({
paste(define_table()[15])
})
#Filters the table by the metric
t_variable_filtered <- reactive({
new_data <- reshaped_df1_join
new_data <- subset(new_data, variable %in% input$variable)
})
output$financeplot <- renderPlotly({
#This is for plotting the metric over time
t_plot <- t_variable_filtered()
t_plot <- t_plot %>%
group_by(date) %>%
summarise(average = mean(as.numeric(value), na.rm = TRUE))
ggplot(data = t_plot, aes(x = date, y = average))+
geom_bar(stat = "identity")+
ggtitle("Movement in ratio over time")+
xlab("Year")+
ylab("Value")+
scale_fill_brewer(palette = "Purples")+
theme(panel.background = element_rect(fill="white",
size = 2, linetype = "solid"),
plot.title = element_text(face = "bold.italic",hjust = 0.5),
axis.title.x = element_text(face = "bold.italic"),
axis.title.y = element_text(face = "bold.italic"),
plot.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(color="grey"),
panel.grid.minor.y = element_line(color="grey"),
panel.border=element_rect(colour="black",fill=NA,size=1))
})
#-----------------------------------------------------------------------------------------------#
#                           Outlier Analysis                                                    #
stats_df <- reactive({
t_filtered <- reshaped_df1_join
t_filtered <- subset(t_filtered, variable %in% input$statistics_variable)
t_filtered <- subset(t_filtered, sector %in% input$statistics_sector)
t_filtered <- t_filtered %>%
group_by(symbol) %>%
summarise(Minimum = ifelse(is.na(min(value, na.rm = TRUE)), paste(as.character("No data available")), round(min(value, na.rm = TRUE),2)),
Average = round(sum(as.numeric(value)) / length(as.numeric(value)),2),
Maximum = ifelse(is.na(max(value, na.rm = TRUE)), paste(as.character("No data available")), round(max(value, na.rm = TRUE),2)),
Missing_Count = sum(is.na(value)),
Missing_percent = (sum(is.na(value)) / length(value)) * 100)
})
output$tablehead <- reactive({
paste(gsub('[_]',' ',input$variable),"analysis for the", gsub('[_]', ' ', input$statistics_sector), "sector")
})
stats_sector_df <- reactive({
stats_sector <- reshaped_df1_join
stats_sector <- subset(stats_sector, variable %in% input$statistics_variable)
stats_sector <- subset(stats_sector, sector %in% input$statistics_sector)
stats_sector <- stats_sector %>%
summarise(Minimum = min(value, na.rm = TRUE), Average = mean(as.numeric(value), na.rm = TRUE), Maximum = max(value, na.rm = TRUE),
Missing_count = sum(is.na(value)), Missing_percent = round((sum(is.na(value)) / (sum(is.na(value)) + sum(!is.na(value))) * 100)))
})
output$stats <- renderDataTable({
t_stats<- stats_sector_df()
datatable(t_stats)
})
output$stats_comphead <- renderText({
paste("Company Breakdown")
})
output$stats_comp <- renderDataTable({
t_comp <- stats_df()
datatable(t_comp)
})
output$outlierhead <- renderText({
paste("Outlier anlaysis for", gsub('[_]', ' ', input$variable))
})
output$outlier_plot <- renderPlot({
df1 %>% plot_outlier(input$variable_outlier)
})
#-----------------------------------------------------------------------------------------------#
#                               Visualisation                                                   #
output$corrhead <- renderText({
paste("Correlation Matrix")
})
output$corr <- renderPlot({
tryCatch({
f_cor_matrix(input$visualisation_sector)
}, error = function(e){
paste("Error, please select a different sector")
})
})
#-----------------------------------------------------------------------------------------------#
#                                Overview & Missing                                                     #
output$table_statshead <- renderText({
paste("Overall Statistical Analysis")
})
output$table_stats <- DT::renderDataTable({
datatable(statistical_overview(input$years[1],input$years[2]),options = formatRound(digits = 2))
})
output$missing_head <- renderText({
paste("Missing Analysis")
})
missing_df <- reactive({
loaded_date <- df1
loaded_date <- loaded_date %>%
filter(date %in% c(as.Date(paste(input$years[1], "12-31", sep = "-")) : as.Date(paste(input$years[2], "12-31", sep = "-"))))
})
output$missing_plot <- renderPlotly({
gg_miss_var(missing_df())
})
#-----------------------------------------------------------------------------------------------#
#                                 Density                                                       #
output$densityhead <- renderText({
paste("Density Plot for", gsub("[_]", " ", input$density_variable))
})
density_df <- reactive({
t_density <- reshaped_df1
t_density <- subset(t_density, variable %in% input$density_variable)
})
output$density <- renderPlotly({
p <- ggplot(density_df(), aes(x = value)) +
geom_density(fill = "purple") +
geom_vline(aes(xintercept = mean(density_df()$value, na.rm = TRUE)),
color = "black", linetype = "dashed", size = 1) +
labs(title = "Density Curve", x = paste(gsub("[_]", " ", input$density_variable)), y = "Density")
})
#------------------------------Company Breakdown-------------------------------------#
observeEvent(input$company_sector,{
updateSelectInput(session,'company_symbol',
choices=sort(unique(df1_join$symbol[df1_join$sector==input$company_sector])))
})
output$companyhead <- renderText({
paste(gsub("[_]", " ", input$type), "Analysis for", gsub("[_]", " ", input$company_symbol))
})
company_df <- reactive({
t_company <- reshaped_df1_join
t_company <- subset(t_company, sector %in% input$company_sector)
t_company <- subset(t_company, symbol %in% input$company_symbol)
t_company <- subset(t_company, Type %in% input$company_type)
t_company <- t_company %>%
group_by(date)
})
output$company_plot <- renderPlotly({
ggplot(company_df(), aes(x = date, y = value)) +
geom_bar(stat = "identity") +
facet_wrap(~variable)
})
}
#-----------------------------------------------------------------------------------------------#
#                                 Shiny App Run                                                 #
shinyApp(ui,server)
View(reshaped_df1_join)
View(t_definitions)
#---------------------Reshaped with column type-----------------------------------------------#
reshaped_df1_join <- left_join(reshaped_df1_join[1:11802,], t_definitions[, c(1,2)], by = c("variable" = "Name"))
View(reshaped_df1_join)
#Prep
source("UDF.R")
#---------------------------------------------------------------------------------------------#
#                           Shiny Server                                                      #
server <- function(input,output,session){
# Analysis Sidepanel
observeEvent(input$type,{
updateSelectInput(session,'variable',
choices=sort(unique(t_definitions$Name[t_definitions$Type==input$type])))
})
# Statistics sidepanel
observeEvent(input$statistics_sector,{
updateSelectInput(session,'statistics_company',
choices=sort(unique(df1_join$symbol[df1_join$sector==input$statistics_sector])))
})
observeEvent(input$statistics_type,{
updateSelectInput(session,'statistics_variable',
choices=sort(unique(t_definitions$Name[t_definitions$Type==input$statistics_type])))
})
#Outlier Sidepanel
observeEvent(input$type_outlier,{
updateSelectInput(session,'variable_outlier',
choices=sort(unique(t_definitions$Name[t_definitions$Type==input$type_outlier])))
})
#Density Sidepanel
observeEvent(input$density_type,{
updateSelectInput(session,'density_variable',
choices=sort(unique(t_definitions$Name[t_definitions$Type==input$density_type])))
})
observeEvent(input$density_sector,{
updateSelectInput(session,'density_company',
choices=sort(unique(df1_join$symbol[df1_join$sector==input$density_sector])))
})
#-----------------------------------------------------------------------------------------------#
#                                     Mains                                                     #
output$header <- reactive({
paste(gsub('[_]',' ',input$variable),"analysis")
})
output$Definition <- renderText({
paste("Definition")
})
#This reactive table will change depending on what ratio is entered by the user. The outputs
#below will then extract the relevant information and put it into the Analysis tab.
define_table <- reactive({
t_definitons_filtered <- t_definitions
t_definitons_filtered <- subset(t_definitons_filtered, Name %in% input$variable)
})
output$definition <- renderText({
paste(define_table()[4])
})
output$ExpectedRiskDirection <- renderText({
paste("Expected Risk Direction")
})
output$riskdirection <- renderText({
paste(define_table()[5])
})
output$Formula <- renderText({
paste("Formula")
})
output$formula <- renderText({
paste(define_table()[3])
})
output$componenttable <- renderDataTable({
#Creates a blank dataframe, 2 columns - 1 for components, 1 for sub-derivations
components <- data.frame(nrow = 7,ncol = 2)
#Loops through define_table and adds in relevant details
for(i in 1:7){
if(!is.na(define_table()[5+i])){
components[i,1] <- define_table()[5+i]
}else{
components[i,1] <- NA
}
}
for(i in 1:2){
if(!is.na(define_table()[12+i])){
components[i,2] <- define_table()[12+i]
}else{
components[i,2] <- NA
}
}
#Table size will adjust according to the number of elements
components <- components[complete.cases(components[,1]),]
datatable(components,
colnames = c("Core Component","Sub-Derivation"), options = list(dom = 'ft',columnDefs = list(list(className = 'dt-center'))),
rownames = FALSE,class = 'cell-border stripe')
})
output$FormulaFullFormat <- renderText({
paste("Formula (full format)")
})
output$fullformula <- renderText({
paste(define_table()[15])
})
#Filters the table by the metric
t_variable_filtered <- reactive({
new_data <- reshaped_df1_join
new_data <- subset(new_data, variable %in% input$variable)
})
output$financeplot <- renderPlotly({
#This is for plotting the metric over time
t_plot <- t_variable_filtered()
t_plot <- t_plot %>%
group_by(date) %>%
summarise(average = mean(as.numeric(value), na.rm = TRUE))
ggplot(data = t_plot, aes(x = date, y = average))+
geom_bar(stat = "identity")+
ggtitle("Movement in ratio over time")+
xlab("Year")+
ylab("Value")+
scale_fill_brewer(palette = "Purples")+
theme(panel.background = element_rect(fill="white",
size = 2, linetype = "solid"),
plot.title = element_text(face = "bold.italic",hjust = 0.5),
axis.title.x = element_text(face = "bold.italic"),
axis.title.y = element_text(face = "bold.italic"),
plot.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(color="grey"),
panel.grid.minor.y = element_line(color="grey"),
panel.border=element_rect(colour="black",fill=NA,size=1))
})
#-----------------------------------------------------------------------------------------------#
#                           Outlier Analysis                                                    #
stats_df <- reactive({
t_filtered <- reshaped_df1_join
t_filtered <- subset(t_filtered, variable %in% input$statistics_variable)
t_filtered <- subset(t_filtered, sector %in% input$statistics_sector)
t_filtered <- t_filtered %>%
group_by(symbol) %>%
summarise(Minimum = ifelse(is.na(min(value, na.rm = TRUE)), paste(as.character("No data available")), round(min(value, na.rm = TRUE),2)),
Average = round(sum(as.numeric(value)) / length(as.numeric(value)),2),
Maximum = ifelse(is.na(max(value, na.rm = TRUE)), paste(as.character("No data available")), round(max(value, na.rm = TRUE),2)),
Missing_Count = sum(is.na(value)),
Missing_percent = (sum(is.na(value)) / length(value)) * 100)
})
output$tablehead <- reactive({
paste(gsub('[_]',' ',input$variable),"analysis for the", gsub('[_]', ' ', input$statistics_sector), "sector")
})
stats_sector_df <- reactive({
stats_sector <- reshaped_df1_join
stats_sector <- subset(stats_sector, variable %in% input$statistics_variable)
stats_sector <- subset(stats_sector, sector %in% input$statistics_sector)
stats_sector <- stats_sector %>%
summarise(Minimum = min(value, na.rm = TRUE), Average = mean(as.numeric(value), na.rm = TRUE), Maximum = max(value, na.rm = TRUE),
Missing_count = sum(is.na(value)), Missing_percent = round((sum(is.na(value)) / (sum(is.na(value)) + sum(!is.na(value))) * 100)))
})
output$stats <- renderDataTable({
t_stats<- stats_sector_df()
datatable(t_stats)
})
output$stats_comphead <- renderText({
paste("Company Breakdown")
})
output$stats_comp <- renderDataTable({
t_comp <- stats_df()
datatable(t_comp)
})
output$outlierhead <- renderText({
paste("Outlier anlaysis for", gsub('[_]', ' ', input$variable))
})
output$outlier_plot <- renderPlot({
df1 %>% plot_outlier(input$variable_outlier)
})
#-----------------------------------------------------------------------------------------------#
#                               Visualisation                                                   #
output$corrhead <- renderText({
paste("Correlation Matrix")
})
output$corr <- renderPlot({
tryCatch({
f_cor_matrix(input$visualisation_sector)
}, error = function(e){
paste("Error, please select a different sector")
})
})
#-----------------------------------------------------------------------------------------------#
#                                Overview & Missing                                                     #
output$table_statshead <- renderText({
paste("Overall Statistical Analysis")
})
output$table_stats <- DT::renderDataTable({
datatable(statistical_overview(input$years[1],input$years[2]),options = formatRound(digits = 2))
})
output$missing_head <- renderText({
paste("Missing Analysis")
})
missing_df <- reactive({
loaded_date <- df1
loaded_date <- loaded_date %>%
filter(date %in% c(as.Date(paste(input$years[1], "12-31", sep = "-")) : as.Date(paste(input$years[2], "12-31", sep = "-"))))
})
output$missing_plot <- renderPlotly({
gg_miss_var(missing_df())
})
#-----------------------------------------------------------------------------------------------#
#                                 Density                                                       #
output$densityhead <- renderText({
paste("Density Plot for", gsub("[_]", " ", input$density_variable))
})
density_df <- reactive({
t_density <- reshaped_df1
t_density <- subset(t_density, variable %in% input$density_variable)
})
output$density <- renderPlotly({
p <- ggplot(density_df(), aes(x = value)) +
geom_density(fill = "purple") +
geom_vline(aes(xintercept = mean(density_df()$value, na.rm = TRUE)),
color = "black", linetype = "dashed", size = 1) +
labs(title = "Density Curve", x = paste(gsub("[_]", " ", input$density_variable)), y = "Density")
})
#------------------------------Company Breakdown-------------------------------------#
observeEvent(input$company_sector,{
updateSelectInput(session,'company_symbol',
choices=sort(unique(df1_join$symbol[df1_join$sector==input$company_sector])))
})
output$companyhead <- renderText({
paste(gsub("[_]", " ", input$type), "Analysis for", gsub("[_]", " ", input$company_symbol))
})
company_df <- reactive({
t_company <- reshaped_df1_join
t_company <- subset(t_company, sector %in% input$company_sector)
t_company <- subset(t_company, symbol %in% input$company_symbol)
t_company <- subset(t_company, Type %in% input$company_type)
t_company <- t_company %>%
group_by(date)
})
output$company_plot <- renderPlotly({
ggplot(company_df(), aes(x = date, y = value)) +
geom_bar(stat = "identity") +
facet_wrap(~variable)
})
}
#-----------------------------------------------------------------------------------------------#
#                                 Shiny App Run                                                 #
shinyApp(ui,server)
